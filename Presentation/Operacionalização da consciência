
SIG Softgoal Interdependency Graph


Consciência de Contexto: Ambiente computacional, ambiente físico e localização

Consciência de Tempo

Consciência do contexto Social: normas, relações sociais, usuários



2.3 Operacionalização de consciência de contexto

estar consciente do contexto permite ao software não só ser capaz de lidar com as mudanças no meio 
ambiente que o software opera, mas também ser capaz de melhorar a resposta para a utilização do software.

técnicas de consciência de contexto (context-awareness) têm por objetivo apoiar os requisitos funcionais e 
não funcionais do software


2.3.1. Operacionalização de consciência do ambiente físico

técnicas para operacionalização de consciência de contexto compartilham um 
mesmo núcleo: sensoriamento (ou monitoração) do contexto

Em ambientes físicos, as informações contextuais são 
normalmente determinadas por sensores de hardware ou software embarcados, 
como o GPS e programas de monitoramento, ou são fornecidas pelos usuários. 


Método GQO (Goal Question Operalization)

Questões relevantes: 

- "Quais dados devem ser detectados e medidos?"
- "Que tipo de sensores ou instrumentos devem ser utilizados?"
- "Como as informações fornecidas por sensores ou instrumentos utilizados devem ser acessadas?"

Sugestões:

A fim de responder a estas perguntas, sugerimos duas operacionalizações: monitoramento através de sensores e instrumentos e uso 
de protocolos de comunicação com sensores – os protocolos estão intimamente 
ligados aos sensores utilizados


2.3.2.
Operacionalização de consciência do ambiente computacional

Questões relevantes: 

- "Algum middleware é usado?", 
- "Quais são os recursos disponíveis?"
- "Como os recursos são acessados?"
- "Como a informação é modelada?"
- "Como as informações são  armazenadas?"
- "Como as informações são recuperadas?" 
- "Como as informações são trocadas entre diferentes atores?"

Sugestões:

operacionalizações de primeiro nível para consciência do ambiente computacional o uso de: "middleware para sistemas multiagentes", “modelos de recursos e informação" e "padrões para a troca de informações". 

Para operacionalizar "Modelo de recursos e informação", sugerimos utilizar uma linguagem para modelagem de software, ontologias ou XML. XML pode ser utilizada também para operacionalizar "Padrões para a troca de informações"

Como linguagem para modelagem de software, utilizar alguma orientada a meta, como i* (i-estrela) ou KAOS, que são mais adequadas para sistemas multiagente. Para ontologias, melhor usar OWL ou RDF


2.3.3. Operacionalização de consciência de localização

- Cobertura mundial (outdoors)
   - GPS
- Cobertura local (indoors)
   - LPS
   - RTLS

! Falar sobre artigo que propõe modelo matemático que permite 1 cm de precisão em GPS

Questões relevantes: 

- "Onde está o usuário/dispositivo/software?"
- "Onde o usuário/dispositivo/software estará?"
- "Qual a cobertura necessária, local ou global"
- "O software irá operar em um ambiente interno ou em um lugar aberto?"


2.4. Operacionalização de consciência do tempo


Questões relevantes: 
- “qual é o instante em que está operando?”

Sugestões:
- o uso de servidores de tempo. 
  - Ex.: Worldtimeserver.com 


2.6. Operacionalização de consciência do contexto social

Nós agrupamos sob o requisito de consciência do contexto social um conjunto de tipos especiais de consciência que podem permitir ao software perceber o contexto social em que ele vai operar, embora de forma limitada.


2.6.1. Operacionalização de consciência de normas

Método GQO
- "Qual o tipo das normas que agente deve 
seguir?"
- “Quais são as penalidades no caso de não cumprimento da norma?”

Em uma abordagem exógena, existem basicamente dois mecanismos: 
  - de arregimentação (regimentation):  o sistema impede que um agente execute uma ação proibida, o que diminui a autonomia do agente
  - de coerção (enforcement): baseado na ideia de responder depois que uma violação das normas ocorra. Permitir violações contribui para a flexibilidade e autonomia do comportamento dos agentes. Estas normas são muitas vezes especificadas por meio de conceitos como permissões, obrigações e proibições. Em alguns casos, cumprir uma norma poderia trazer um obstáculo à satisfação das metas do ou levar um estado de insatisfação (deny) de suas metas flexíveis. Quando essa situação ocorre, pode ser melhor para o agente decidir não cumprir a norma e receber as sanções aplicáveis.

Quando as normas são implementadas de forma endógena, integrando-as 
no programa dos agentes individuais, elas podem ser vistas como limitações 
internalizadas pelo comportamento do agente.

Questões relevantes: 
- "As normas são implementadas de forma exógena ou endógena 
aos agentes?"
- "Que tipo de mecanismo é usado: arregimentação ou coerção?"
- "Quais sanções são aplicáveis a cada violação?"

Sugestões:
Como operacionalização do requisito de consciência de normas sugerimos duas atividades: - modelagem de normas 
  - modelar as restrições
  - modelar as sanções
- implementação de normas
  - endógena
  - exógena
    - mecanismo de coerção
    - mecanismo de arregimentação


Finalmente, para implementar os dois mecanismos, sugerimos a utilização de um framework de norma.


2.6.2. Operacionalização de consciência das relações sociais

Alguns middleware para Sistemas Multiagentes, como JADE e SACI, oferecem um serviço de páginas amarelas para permitir aos agentes conhecer uns aos outros.


Questões relevantes: 
- "Com quem o agente pode 
cooperar?"
- "Em que bases a cooperação pode ser estabelecida?"
- "Quais são os papéis desempenhados pelos agentes no 
relacionamentos?"

Soluções: 

Para operacionalizar estas questões, sugerimos definir as 
dependências que podem ser estabelecidas, definir os papéis que podem ser desempenhados e definir um protocolo de interação

2.6.3. Operacionalização de consciência de usuários

Embora tenhamos nos referido a esta questão como identificação do usuário, em muitos casos, a questão abrange a identificação e a autenticação do usuário.

A maioria dos métodos usados em 
software para identificar os usuários são baseados em informações anteriores 
armazenadas sobre os usuários que servem como um identificador único. Um usuário pode ser identificado somente se o sistema tem algum "conhecimento" prévio sobre ele 

Autenticação:
 1) fornecer uma identificação e uma senha
 2) dispositivo pessoal que carrega a sua identificação (Ex. Smartcard)
 3) autenticação biométrica: digital, voz, face, íris, características comportamentais


Questões relevantes: 
 - "Quem é o usuário?"
 - "Como os usuários podem ser identificados?"
  - "Quais são as preferências dos 
usuários?" 
  - "Que ações os usuários têm realizado?"
  - "Quais são os estados 
atuais dos usuários?"


Soluções: 
 - identificar os 
usuários

Para identificação de usuários sugerimos como alternativas o uso de autenticação por dispositivo pessoal, autenticação biométrica e autenticação por senha. A autenticação biométrica pode ser 
operacionalizada por face, impressão palmar, íris, voz, impressão digital, DNA, geometria da mão ou veias da mão. 

 - perceber (ser consciente de) as preferências dos usuários

solicitar que os usuários informem suas preferências e inferir as preferências dos usuários.


  - perceber as ações dos usuários. 

sugerimos rastrear as ações dos usuários e detectar padrões de comportamento

